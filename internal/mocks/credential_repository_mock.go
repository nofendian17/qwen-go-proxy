// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/interfaces/interfaces.go -destination=internal/mocks/credential_repository_mock.go -package=mocks CredentialRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	entities "qwen-go-proxy/internal/domain/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCredentialRepository is a mock of CredentialRepository interface.
type MockCredentialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialRepositoryMockRecorder
	isgomock struct{}
}

// MockCredentialRepositoryMockRecorder is the mock recorder for MockCredentialRepository.
type MockCredentialRepositoryMockRecorder struct {
	mock *MockCredentialRepository
}

// NewMockCredentialRepository creates a new mock instance.
func NewMockCredentialRepository(ctrl *gomock.Controller) *MockCredentialRepository {
	mock := &MockCredentialRepository{ctrl: ctrl}
	mock.recorder = &MockCredentialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialRepository) EXPECT() *MockCredentialRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockCredentialRepository) Load() (*entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCredentialRepositoryMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCredentialRepository)(nil).Load))
}

// Save mocks base method.
func (m *MockCredentialRepository) Save(credentials *entities.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", credentials)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCredentialRepositoryMockRecorder) Save(credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCredentialRepository)(nil).Save), credentials)
}

// MockOAuthService is a mock of OAuthService interface.
type MockOAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthServiceMockRecorder
	isgomock struct{}
}

// MockOAuthServiceMockRecorder is the mock recorder for MockOAuthService.
type MockOAuthServiceMockRecorder struct {
	mock *MockOAuthService
}

// NewMockOAuthService creates a new mock instance.
func NewMockOAuthService(ctrl *gomock.Controller) *MockOAuthService {
	mock := &MockOAuthService{ctrl: ctrl}
	mock.recorder = &MockOAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthService) EXPECT() *MockOAuthServiceMockRecorder {
	return m.recorder
}

// AuthenticateWithDeviceFlow mocks base method.
func (m *MockOAuthService) AuthenticateWithDeviceFlow(clientID, scope string) (*entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateWithDeviceFlow", clientID, scope)
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateWithDeviceFlow indicates an expected call of AuthenticateWithDeviceFlow.
func (mr *MockOAuthServiceMockRecorder) AuthenticateWithDeviceFlow(clientID, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithDeviceFlow", reflect.TypeOf((*MockOAuthService)(nil).AuthenticateWithDeviceFlow), clientID, scope)
}

// RefreshToken mocks base method.
func (m *MockOAuthService) RefreshToken(refreshToken, clientID string) (*entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshToken, clientID)
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockOAuthServiceMockRecorder) RefreshToken(refreshToken, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockOAuthService)(nil).RefreshToken), refreshToken, clientID)
}

// MockAIService is a mock of AIService interface.
type MockAIService struct {
	ctrl     *gomock.Controller
	recorder *MockAIServiceMockRecorder
	isgomock struct{}
}

// MockAIServiceMockRecorder is the mock recorder for MockAIService.
type MockAIServiceMockRecorder struct {
	mock *MockAIService
}

// NewMockAIService creates a new mock instance.
func NewMockAIService(ctrl *gomock.Controller) *MockAIService {
	mock := &MockAIService{ctrl: ctrl}
	mock.recorder = &MockAIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIService) EXPECT() *MockAIServiceMockRecorder {
	return m.recorder
}

// ChatCompletions mocks base method.
func (m *MockAIService) ChatCompletions(req *entities.ChatCompletionRequest, credentials *entities.Credentials) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCompletions", req, credentials)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatCompletions indicates an expected call of ChatCompletions.
func (mr *MockAIServiceMockRecorder) ChatCompletions(req, credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCompletions", reflect.TypeOf((*MockAIService)(nil).ChatCompletions), req, credentials)
}

// GetBaseURL mocks base method.
func (m *MockAIService) GetBaseURL(credentials *entities.Credentials, defaultURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL", credentials, defaultURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockAIServiceMockRecorder) GetBaseURL(credentials, defaultURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockAIService)(nil).GetBaseURL), credentials, defaultURL)
}

// MockStreamingService is a mock of StreamingService interface.
type MockStreamingService struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingServiceMockRecorder
	isgomock struct{}
}

// MockStreamingServiceMockRecorder is the mock recorder for MockStreamingService.
type MockStreamingServiceMockRecorder struct {
	mock *MockStreamingService
}

// NewMockStreamingService creates a new mock instance.
func NewMockStreamingService(ctrl *gomock.Controller) *MockStreamingService {
	mock := &MockStreamingService{ctrl: ctrl}
	mock.recorder = &MockStreamingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingService) EXPECT() *MockStreamingServiceMockRecorder {
	return m.recorder
}

// ProcessStreamingResponse mocks base method.
func (m *MockStreamingService) ProcessStreamingResponse(response, writer any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStreamingResponse", response, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessStreamingResponse indicates an expected call of ProcessStreamingResponse.
func (mr *MockStreamingServiceMockRecorder) ProcessStreamingResponse(response, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStreamingResponse", reflect.TypeOf((*MockStreamingService)(nil).ProcessStreamingResponse), response, writer)
}
