// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/auth/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/auth/auth.go -destination=internal/mocks/credential_repository_mock.go -package=mocks CredentialRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "qwen-go-proxy/internal/domain/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCredentialRepository is a mock of CredentialRepository interface.
type MockCredentialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialRepositoryMockRecorder
	isgomock struct{}
}

// MockCredentialRepositoryMockRecorder is the mock recorder for MockCredentialRepository.
type MockCredentialRepositoryMockRecorder struct {
	mock *MockCredentialRepository
}

// NewMockCredentialRepository creates a new mock instance.
func NewMockCredentialRepository(ctrl *gomock.Controller) *MockCredentialRepository {
	mock := &MockCredentialRepository{ctrl: ctrl}
	mock.recorder = &MockCredentialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialRepository) EXPECT() *MockCredentialRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockCredentialRepository) Load() (*entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCredentialRepositoryMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCredentialRepository)(nil).Load))
}

// Save mocks base method.
func (m *MockCredentialRepository) Save(credentials *entities.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", credentials)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCredentialRepositoryMockRecorder) Save(credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCredentialRepository)(nil).Save), credentials)
}
