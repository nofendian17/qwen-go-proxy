// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/streaming/streaming.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/streaming/streaming.go -destination=internal/mocks/streaming_usecase_mock.go -package=mocks StreamingUseCaseInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStreamingUseCaseInterface is a mock of StreamingUseCaseInterface interface.
type MockStreamingUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockStreamingUseCaseInterfaceMockRecorder is the mock recorder for MockStreamingUseCaseInterface.
type MockStreamingUseCaseInterfaceMockRecorder struct {
	mock *MockStreamingUseCaseInterface
}

// NewMockStreamingUseCaseInterface creates a new mock instance.
func NewMockStreamingUseCaseInterface(ctrl *gomock.Controller) *MockStreamingUseCaseInterface {
	mock := &MockStreamingUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockStreamingUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingUseCaseInterface) EXPECT() *MockStreamingUseCaseInterfaceMockRecorder {
	return m.recorder
}

// ProcessStreamingResponse mocks base method.
func (m *MockStreamingUseCaseInterface) ProcessStreamingResponse(ctx context.Context, resp *http.Response, writer http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStreamingResponse", ctx, resp, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessStreamingResponse indicates an expected call of ProcessStreamingResponse.
func (mr *MockStreamingUseCaseInterfaceMockRecorder) ProcessStreamingResponse(ctx, resp, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStreamingResponse", reflect.TypeOf((*MockStreamingUseCaseInterface)(nil).ProcessStreamingResponse), ctx, resp, writer)
}
