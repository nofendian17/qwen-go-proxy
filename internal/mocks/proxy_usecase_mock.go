// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/proxy/proxy.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/proxy/proxy.go -destination=internal/mocks/proxy_usecase_mock.go -package=mocks ProxyUseCaseInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	entities "qwen-go-proxy/internal/domain/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProxyUseCaseInterface is a mock of ProxyUseCaseInterface interface.
type MockProxyUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProxyUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockProxyUseCaseInterfaceMockRecorder is the mock recorder for MockProxyUseCaseInterface.
type MockProxyUseCaseInterfaceMockRecorder struct {
	mock *MockProxyUseCaseInterface
}

// NewMockProxyUseCaseInterface creates a new mock instance.
func NewMockProxyUseCaseInterface(ctrl *gomock.Controller) *MockProxyUseCaseInterface {
	mock := &MockProxyUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockProxyUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyUseCaseInterface) EXPECT() *MockProxyUseCaseInterfaceMockRecorder {
	return m.recorder
}

// AuthenticateManually mocks base method.
func (m *MockProxyUseCaseInterface) AuthenticateManually() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateManually")
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthenticateManually indicates an expected call of AuthenticateManually.
func (mr *MockProxyUseCaseInterfaceMockRecorder) AuthenticateManually() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateManually", reflect.TypeOf((*MockProxyUseCaseInterface)(nil).AuthenticateManually))
}

// ChatCompletions mocks base method.
func (m *MockProxyUseCaseInterface) ChatCompletions(req *entities.ChatCompletionRequest) (*entities.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCompletions", req)
	ret0, _ := ret[0].(*entities.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatCompletions indicates an expected call of ChatCompletions.
func (mr *MockProxyUseCaseInterfaceMockRecorder) ChatCompletions(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCompletions", reflect.TypeOf((*MockProxyUseCaseInterface)(nil).ChatCompletions), req)
}

// CheckAuthentication mocks base method.
func (m *MockProxyUseCaseInterface) CheckAuthentication() (*entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthentication")
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthentication indicates an expected call of CheckAuthentication.
func (mr *MockProxyUseCaseInterfaceMockRecorder) CheckAuthentication() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthentication", reflect.TypeOf((*MockProxyUseCaseInterface)(nil).CheckAuthentication))
}

// GetModels mocks base method.
func (m *MockProxyUseCaseInterface) GetModels() ([]*entities.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModels")
	ret0, _ := ret[0].([]*entities.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockProxyUseCaseInterfaceMockRecorder) GetModels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockProxyUseCaseInterface)(nil).GetModels))
}

// StreamChatCompletions mocks base method.
func (m *MockProxyUseCaseInterface) StreamChatCompletions(req *entities.ChatCompletionRequest, writer http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamChatCompletions", req, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamChatCompletions indicates an expected call of StreamChatCompletions.
func (mr *MockProxyUseCaseInterfaceMockRecorder) StreamChatCompletions(req, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamChatCompletions", reflect.TypeOf((*MockProxyUseCaseInterface)(nil).StreamChatCompletions), req, writer)
}
