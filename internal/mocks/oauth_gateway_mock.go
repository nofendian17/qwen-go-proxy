// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/gateways/qwen.go
//
// Generated by this command:
//
//	mockgen -source=internal/interfaces/gateways/qwen.go -destination=internal/mocks/oauth_gateway_mock.go -package=mocks OAuthGateway
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "qwen-go-proxy/internal/domain/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOAuthGateway is a mock of OAuthGateway interface.
type MockOAuthGateway struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthGatewayMockRecorder
	isgomock struct{}
}

// MockOAuthGatewayMockRecorder is the mock recorder for MockOAuthGateway.
type MockOAuthGatewayMockRecorder struct {
	mock *MockOAuthGateway
}

// NewMockOAuthGateway creates a new mock instance.
func NewMockOAuthGateway(ctrl *gomock.Controller) *MockOAuthGateway {
	mock := &MockOAuthGateway{ctrl: ctrl}
	mock.recorder = &MockOAuthGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthGateway) EXPECT() *MockOAuthGatewayMockRecorder {
	return m.recorder
}

// AuthenticateWithDeviceFlow mocks base method.
func (m *MockOAuthGateway) AuthenticateWithDeviceFlow(clientID, scope string) (*entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateWithDeviceFlow", clientID, scope)
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateWithDeviceFlow indicates an expected call of AuthenticateWithDeviceFlow.
func (mr *MockOAuthGatewayMockRecorder) AuthenticateWithDeviceFlow(clientID, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithDeviceFlow", reflect.TypeOf((*MockOAuthGateway)(nil).AuthenticateWithDeviceFlow), clientID, scope)
}

// RefreshToken mocks base method.
func (m *MockOAuthGateway) RefreshToken(refreshToken, clientID string) (*entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshToken, clientID)
	ret0, _ := ret[0].(*entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockOAuthGatewayMockRecorder) RefreshToken(refreshToken, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockOAuthGateway)(nil).RefreshToken), refreshToken, clientID)
}
